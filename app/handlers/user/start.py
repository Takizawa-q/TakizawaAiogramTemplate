from aiogram import types, html
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from app.keyboards.inline.constructor import create_inline_keyboard
from app.keyboards.reply.constructor import ReplyKeyboardConstructor

TEXT = """üí° –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é, –∏ –æ—Ç—Å—é–¥–∞ —è –≥–æ—Ç–æ–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!

üôè –ù–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –∫–∞–∫ –≥–æ—Ç–æ–≤—ã—Ö —á–∞—Ç-–±–æ—Ç–æ–≤ –¥–ª—è —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏ –ú–õ–ú –±–∏–∑–Ω–µ—Å–∞, —Ç–∞–∫ –∏ –æ–±—É—á–∞—é—â–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –∞ —Ç–∞–∫–∂–µ –æ–Ω–ª–∞–π–Ω –∫—É—Ä—Å—ã –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —á–∞—Ç-–±–æ—Ç–æ–≤ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ SX_100!

‚úÖ –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —É —Ç–µ–±—è <b>xxx</b> –±–∞–ª–ª–æ–≤ (—Ä—É–±–ª–µ–π)! (–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ 23:59 —Å–µ–≥–æ–¥–Ω—è, –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–Ω–∏ –æ–±–Ω—É–ª—è—Ç—Å—è.)

üòé –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –±–æ–ª—å—à–µ."""

def generate_menu_buttons() -> InlineKeyboardBuilder:
    main_menu_buttons = [
        ["üèÜ –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å", "user_profile"],
        ["üí∞ –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ", "partnership"],
        ["ü§ñ –ù–∞—à–∏ –±–æ—Ç—ã", "my_bots"],
        ["üìë –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–æ—Ç—É", "laws_info"]]
    builder = create_inline_keyboard(buttons=main_menu_buttons,
                                     schema=[2, 1, 1])
    return builder
    
async def start(msg: types.Message, state: FSMContext) -> None:
    if msg.from_user is None:
        return
    main_menu_buttons = generate_menu_buttons()
    
    if isinstance(msg, types.Message):
        if msg.text == "/start":
            open_menu_button = ReplyKeyboardConstructor(["üß≥ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"],
                                            [1])
            await msg.answer(f"–ü—Ä–∏–≤–µ—Ç, {msg.from_user.full_name}",
                             reply_markup=open_menu_button)
        
        await msg.answer(text=TEXT,
                        reply_markup=main_menu_buttons.as_markup())
        
    if isinstance(msg, types.CallbackQuery):
        call: types.CallbackQuery = msg
        if call.message.text == "/start":
            builder = ReplyKeyboardConstructor(["üß≥ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"],
                                            [1])
        await call.message.edit_text(text=TEXT,
                        reply_markup=main_menu_buttons.as_markup())

# async def test(msg: types.Message):
#     m = [
#         f'Hello, <a href="tg://user?id={msg.from_user.id}">{html.quote(msg.from_user.full_name)}</a>'
#     ]


#     await msg.answer("\n".join(m), reply_markup=builder.as_markup(resize_keyboard=True))
