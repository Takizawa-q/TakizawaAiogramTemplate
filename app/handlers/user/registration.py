from aiogram import types, Bot
from aiogram.fsm.context import FSMContext
from app.states.registration import Registration
from app.misc.event_parser import get_user_from_event
from app import db
import asyncio
from app.keyboards.reply.constructor import ReplyKeyboardConstructor
from app.handlers.user.start import start


async def start_registration(message: types.Message, state: FSMContext, referal_id: int):
    await state.update_data(name=message.text)
    await state.update_data(referal_id=referal_id)
    msg = await message.answer("\n".join(["–ü—Ä–∏–≤–µ—Ç üëã",
        "\n–°–º–æ—Ç—Ä—é –≤—ã —É –Ω–∞—Å –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à e-mail üì• –≤ —á–∞—Ç.",
        "<b>–ß—Ç–æ–±—ã –º—ã –≤—Å–µ–≥–¥–∞ –º–æ–≥–ª–∏ –±—ã—Ç—å —Å –≤–∞–º–∏ –Ω–∞ —Å–≤—è–∑–∏!</b>"]))
    await message.delete()
    await state.update_data(message_to_delete=[msg.message_id, message.chat.id])
    await state.set_state(Registration.mail)

async def phone(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    message_id, chat_id = data["message_to_delete"][0], data["message_to_delete"][1]
    await bot.delete_message(chat_id=chat_id,
                             message_id=message_id)
    kb = ReplyKeyboardConstructor([
        ["‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", "request_contact"],
        "‚ö†Ô∏è –ù–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–æ–º–µ—Ä"],
                                    
        schema=[1, 1]
        )
    await message.delete()
    msg = await message.answer("\n".join(["–ü–æ –∂–µ–ª–∞–Ω–∏—é, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è",
                                "–ü–µ—Ä–µ–¥–∞–≤–∞—è –Ω–∞–º —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –º—ã –æ–±—è–∑—É–µ–º—Å—è –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º –∏ –Ω–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                                "\n<b>–í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å: 152-–§–ó \"–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\"</b>"],),
                            reply_markup=kb)
    await state.update_data(message_to_delete=[msg.message_id, message.chat.id])
    await state.set_state(Registration.phone)
    await state.update_data(mail=message.text)
    

async def finish_registration(message: types.Message | types.CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    message_id, chat_id = data["message_to_delete"][0], data["message_to_delete"][1]
    await bot.delete_message(chat_id=chat_id,
                             message_id=message_id)
    if isinstance(message, types.CallbackQuery):
        message = message.message
    state_data = await state.get_data()
    await message.delete()
    user = await get_user_from_event(message)
    try:
        phone_number = message.contact.phone_number
    except AttributeError:
        phone_number = None
    email = state_data["mail"]
    referal_id = state_data["referal_id"]
    await state.clear()
    msg = await message.answer("\n".join([
        "–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ",
        "\n<b><i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</i></b> "
    ]))
    await db.models.user.register_user(
                user_id=user.user_id,
                username=user.username,
                fullname=user.fullname,
                email=email,
                phone_number=phone_number,
                referal_id=referal_id
                
            )
    await asyncio.sleep(4)
    await msg.delete()
    
    await start(msg, state)
    